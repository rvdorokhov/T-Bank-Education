spends.minutes = Путь занял %s минут
no.way = Пути между этими точками нет

start.menu.values = 1, 2, 3, 4, 5
start.menu = Выберите ваше действие: \n\
1. Выбрать генерацию лабиринта \n\
2. Выбрать алгоритм поиска пути \n\
3. Выбрать ширину и высоту лабиринта \n\
4. Сгенерировать лабиринт и поискать пути между точками \n\
5. Выход

generate.menu = Выберите алгоритм генерации:
generate.backend.academy.generators.primsgenerator = На основе алгоритма Прима
generate.description.backend.academy.generators.primsgenerator = Алгоритм Прима используется для поиска минимального остовного дерева в неориентированном \
графе с весами рёбер. Он начинает с любой вершины и постепенно добавляет к остовному дереву новые рёбра, соединяющие уже включённые вершины с новыми
generate.backend.academy.generators.dfsgenerator = На основе поиска в глубину (DFS)
generate.description.backend.academy.generators.dfsgenerator = Алгоритм поиска в глубину (DFS) обходит граф, начиная с заданной вершины, посещая каждого из её соседей, \
прежде чем переходить к следующим уровням. Он рекурсивно исследует каждую вершину, пока не достигнет тупика, \
после чего возвращается назад для поиска непосещённых вершин

solver.menu = Выберите алгоритм поиска пути:
solver.backend.academy.solvers.dfssolver = Поиск в глубину
solver.description.backend.academy.solvers.dijkstrasolver = Алгоритм Дейкстры находит кратчайшие пути от начальной вершины до всех остальных в графе \
с неотрицательными весами рёбер. Он постепенно обновляет расстояния до вершин, начиная с исходной, выбирая на каждом шаге вершину \
с минимальным текущим расстоянием и обновляя значения соседей
solver.backend.academy.solvers.dijkstrasolver = Алгоритм Дейкстры
solver.description.backend.academy.solvers.dfssolver = Алгоритм поиска в глубину (DFS) позволяет проверить, есть ли вообще путь между двумя вершинами. \
Он обходит граф, начиная с заданной вершины, посещая каждого из её соседей, \
прежде чем переходить к следующим уровням. Он рекурсивно исследует каждую вершину, пока не достигнет тупика, \
после чего возвращается назад для поиска непосещённых вершин

choose.properties = Введите ширину и высоту лабиринта через пробел (не больше 100 в одном измерении):

maze.menu = Выберите ваше действие:
maze.choose.properties = Выбрать ширину и длину лабиринта
maze.choose.path = Выбрать начальные точки
maze.quit.warning = Вы хотите найти путь между другими точками? Введите no, чтобы выйти. Чтобы продолжить введите yes
maze.choose.start = Введите координаты начальной точки через пробел:
maze.choose.end = Введите координаты конечной точки через пробел:

invalid.input = Некорректный ввод. Введите координаты еще раз
local.cost = минут
